MSGCTL(2)                           Linux Programmer's Manual                          MSGCTL(2)

NNAAMMEE
       msgctl - System V message control operations

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ssyyss//iippcc..hh>>
       ##iinncclluuddee <<ssyyss//mmssgg..hh>>

       iinntt mmssggccttll((iinntt _m_s_q_i_d,, iinntt _c_m_d,, ssttrruucctt mmssqqiidd__ddss **_b_u_f));;

DDEESSCCRRIIPPTTIIOONN
       mmssggccttll()  performs  the  control operation specified by _c_m_d on the System V message queue
       with identifier _m_s_q_i_d.

       The _m_s_q_i_d___d_s data structure is defined in _<_s_y_s_/_m_s_g_._h_> as follows:

           struct msqid_ds {
               struct ipc_perm msg_perm;     /* Ownership and permissions */
               time_t          msg_stime;    /* Time of last msgsnd(2) */
               time_t          msg_rtime;    /* Time of last msgrcv(2) */
               time_t          msg_ctime;    /* Time of last change */
               unsigned long   __msg_cbytes; /* Current number of bytes in
                                                queue (nonstandard) */
               msgqnum_t       msg_qnum;     /* Current number of messages
                                                in queue */
               msglen_t        msg_qbytes;   /* Maximum number of bytes
                                                allowed in queue */
               pid_t           msg_lspid;    /* PID of last msgsnd(2) */
               pid_t           msg_lrpid;    /* PID of last msgrcv(2) */
           };

       The _i_p_c___p_e_r_m structure is defined as follows (the highlighted fields are  settable  using
       IIPPCC__SSEETT):

           struct ipc_perm {
               key_t          __key;       /* Key supplied to msgget(2) */
               uid_t          uuiidd;         /* Effective UID of owner */
               gid_t          ggiidd;         /* Effective GID of owner */
               uid_t          cuid;        /* Effective UID of creator */
               gid_t          cgid;        /* Effective GID of creator */
               unsigned short mmooddee;        /* Permissions */
               unsigned short __seq;       /* Sequence number */
           };

       Valid values for _c_m_d are:

       IIPPCC__SSTTAATT
              Copy  information  from  the  kernel data structure associated with _m_s_q_i_d into the
              _m_s_q_i_d___d_s structure pointed to by _b_u_f.  The caller must have read permission on the
              message queue.

       IIPPCC__SSEETT
              Write  the  values  of some members of the _m_s_q_i_d___d_s structure pointed to by _b_u_f to
              the kernel data structure associated with this message queue,  updating  also  its
              _m_s_g___c_t_i_m_e member.  The following members of the structure are updated: _m_s_g___q_b_y_t_e_s,
              _m_s_g___p_e_r_m_._u_i_d, _m_s_g___p_e_r_m_._g_i_d, and (the least significant 9 bits  of)  _m_s_g___p_e_r_m_._m_o_d_e.
              The  effective  UID  of the calling process must match the owner (_m_s_g___p_e_r_m_._u_i_d) or
              creator (_m_s_g___p_e_r_m_._c_u_i_d) of the message queue, or the caller  must  be  privileged.
              Appropriate  privilege  (Linux:  the  CCAAPP__SSYYSS__RREESSOOUURRCCEE  capability) is required to
              raise the _m_s_g___q_b_y_t_e_s value beyond the system parameter MMSSGGMMNNBB.

       IIPPCC__RRMMIIDD
              Immediately remove the message queue, awakening all waiting reader and writer pro‐
              cesses  (with  an  error return and _e_r_r_n_o set to EEIIDDRRMM).  The calling process must
              have appropriate privileges or its effective user ID must be either  that  of  the
              creator  or owner of the message queue.  The third argument to mmssggccttll() is ignored
              in this case.

       IIPPCC__IINNFFOO (Linux-specific)
              Return information about system-wide message queue limits and  parameters  in  the
              structure  pointed  to by _b_u_f.  This structure is of type _m_s_g_i_n_f_o (thus, a cast is
              required), defined in  _<_s_y_s_/_m_s_g_._h_>  if  the  __GGNNUU__SSOOUURRCCEE  feature  test  macro  is
              defined:

                  struct msginfo {
                      int msgpool; /* Size in kibibytes of buffer pool
                                      used to hold message data;
                                      unused within kernel */
                      int msgmap;  /* Maximum number of entries in message
                                      map; unused within kernel */
                      int msgmax;  /* Maximum number of bytes that can be
                                      written in a single message */
                      int msgmnb;  /* Maximum number of bytes that can be
                                      written to queue; used to initialize
                                      msg_qbytes during queue creation
                                      (msgget(2)) */
                      int msgmni;  /* Maximum number of message queues */
                      int msgssz;  /* Message segment size;
                                      unused within kernel */
                      int msgtql;  /* Maximum number of messages on all queues
                                      in system; unused within kernel */
                      unsigned short int msgseg;
                                   /* Maximum number of segments;
                                      unused within kernel */
                  };

              The _m_s_g_m_n_i, _m_s_g_m_a_x, and _m_s_g_m_n_b settings can be changed via _/_p_r_o_c files of the same
              name; see pprroocc(5) for details.

       MMSSGG__IINNFFOO (Linux-specific)
              Return a _m_s_g_i_n_f_o structure containing the same information as for IIPPCC__IINNFFOO, except
              that  the  following  fields  are returned with information about system resources
              consumed by message queues: the _m_s_g_p_o_o_l field returns the number of message queues
              that  currently  exist on the system; the _m_s_g_m_a_p field returns the total number of
              messages in all queues on the system; and the _m_s_g_t_q_l field returns the total  num‐
              ber of bytes in all messages in all queues on the system.

       MMSSGG__SSTTAATT (Linux-specific)
              Return a _m_s_q_i_d___d_s structure as for IIPPCC__SSTTAATT.  However, the _m_s_q_i_d argument is not a
              queue identifier, but instead an index into the kernel's internal array that main‐
              tains information about all message queues on the system.

RREETTUURRNN VVAALLUUEE
       On  success, IIPPCC__SSTTAATT, IIPPCC__SSEETT, and IIPPCC__RRMMIIDD return 0.  A successful IIPPCC__IINNFFOO or MMSSGG__IINNFFOO
       operation returns the index of the highest used entry  in  the  kernel's  internal  array
       recording  information  about  all  message  queues.   (This information can be used with
       repeated MMSSGG__SSTTAATT operations to obtain information about all queues on  the  system.)   A
       successful  MMSSGG__SSTTAATT  operation returns the identifier of the queue whose index was given
       in _m_s_q_i_d.

       On error, -1 is returned with _e_r_r_n_o indicating the error.

EERRRROORRSS
       On failure, _e_r_r_n_o is set to one of the following:

       EEAACCCCEESS The argument _c_m_d is equal to IIPPCC__SSTTAATT or MMSSGG__SSTTAATT, but the  calling  process  does
              not  have  read  permission  on  the  message  queue  _m_s_q_i_d, and does not have the
              CCAAPP__IIPPCC__OOWWNNEERR capability.

       EEFFAAUULLTT The argument _c_m_d has the value IIPPCC__SSEETT or IIPPCC__SSTTAATT, but the address pointed to  by
              _b_u_f isn't accessible.

       EEIIDDRRMM  The message queue was removed.

       EEIINNVVAALL Invalid  value  for  _c_m_d  or _m_s_q_i_d.  Or: for a MMSSGG__SSTTAATT operation, the index value
              specified in _m_s_q_i_d referred to an array slot that is currently unused.

       EEPPEERRMM  The argument _c_m_d has the value IIPPCC__SSEETT or IIPPCC__RRMMIIDD, but the effective user  ID  of
              the  calling  process  is not the creator (as found in _m_s_g___p_e_r_m_._c_u_i_d) or the owner
              (as found in _m_s_g___p_e_r_m_._u_i_d) of the message queue, and the caller is not  privileged
              (Linux: does not have the CCAAPP__SSYYSS__AADDMMIINN capability).

       EEPPEERRMM  An  attempt  (IIPPCC__SSEETT) was made to increase _m_s_g___q_b_y_t_e_s beyond the system parameter
              MMSSGGMMNNBB,  but  the  caller  is  not  privileged   (Linux:   does   not   have   the
              CCAAPP__SSYYSS__RREESSOOUURRCCEE capability).

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4.

NNOOTTEESS
       The  inclusion of _<_s_y_s_/_t_y_p_e_s_._h_> and _<_s_y_s_/_i_p_c_._h_> isn't required on Linux or by any version
       of POSIX.  However, some old implementations  required  the  inclusion  of  these  header
       files,  and the SVID also documented their inclusion.  Applications intended to be porta‐
       ble to such old systems may need to include these header files.

       The IIPPCC__IINNFFOO, MMSSGG__SSTTAATT and MMSSGG__IINNFFOO operations are used by the iippccss(1) program to provide
       information on allocated resources.  In the future these may modified or moved to a _/_p_r_o_c
       filesystem interface.

       Various fields in the _s_t_r_u_c_t _m_s_q_i_d___d_s were typed as _s_h_o_r_t under Linux 2.2 and have become
       _l_o_n_g  under  Linux 2.4.  To take advantage of this, a recompilation under glibc-2.1.91 or
       later should suffice.  (The kernel distinguishes old and new calls by an IIPPCC__6644  flag  in
       _c_m_d.)

SSEEEE AALLSSOO
       mmssggggeett(2), mmssggrrccvv(2), mmssggssnndd(2), ccaappaabbiilliittiieess(7), mmqq__oovveerrvviieeww(7), ssvviippcc(7)

CCOOLLOOPPHHOONN
       This  page  is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the
       project, information about reporting bugs, and the latest version of this  page,  can  be
       found at http://www.kernel.org/doc/man-pages/.

Linux                                      2015-08-08                                  MSGCTL(2)
